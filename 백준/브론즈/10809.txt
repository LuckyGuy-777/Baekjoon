package basic;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashSet;
import java.util.StringTokenizer;

import javax.print.DocFlavor.STRING;



public class Main {
    public static void main(String[] args) throws IOException {
//10809번 알파벳 찾기. (문제풀이 실패)
//각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를,
//포함되어 있지 않은 경우에는 -1을 출력하는 프로그램    	

    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	
    	// 알파벳 소문자로만 주어진 단어 S
    	String S = br.readLine(); 
    	// 입력받은 문자를, 소문자로 바꿔주기 위한, string -> char 형변환
    	char[] C = S.toCharArray();
    	
    	// 대문자 -> 소문자 로 바꿔주는 루프
    	for(int i = 0; i<C.length; i++) {
    		char A = Character.toLowerCase(C[i]);
    		C[i] = A;
    	}
    	
    	S = String.valueOf(C);
    	
    	int index = 0;
    	
    	//만약 어떤알파벳이 단어에 포함되어잇지 않다면 -1
    	//a-z의 글자에서, 각각의 알파벳이 처음등장하는 위치를
    	//공백으로 구분해서 출력.
    	// 소문자 a는 10진수로 97(아스키코드)
    	String az= "0";
    	
    	while(index < az.length) {
    		char temp =  (char)(97 + index);
    		az[index] = temp;
    		index++;
    		System.out.print(az[index]+"");
    	}
    	
    }
}

// String.toCharArray() 를 사용하면, 문자열->문자 타입으로 
// 타입변환 할수있음. 주의점특수문자도 딸려옴.


//. 문제 해결을 위한 구현 순서
//문자열을 입력받습니다.
//알파벳 소문자 배열을 준비하거나 아스키 코드를 활용해 순회합니다.
//각 알파벳에 대해 indexOf로 위치를 찾아 저장합니다.
//저장된 결과를 공백으로 구분해 출력합니다.


_-------------------------------

package basic;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashSet;
import java.util.StringTokenizer;

import javax.print.DocFlavor.STRING;



public class Main {
    public static void main(String[] args) throws IOException {
//10809번 알파벳 찾기. (정답)
//각각의 알파벳에 대해서, 단어에 포함되어 있는 경우에는 처음 등장하는 위치를,
//포함되어 있지 않은 경우에는 -1을 출력하는 프로그램    	

    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	String S = br.readLine();
    	

	// indexOf 함수는, 값이 없는경우에는 -1을 리턴한다.
    	// 존재하는경우에는 값이 존재하는 위치를 리턴
    	for(int i = 0; i<26; i++) {
    		System.out.println(S.indexOf((char)(97+i))+" ");
    	}

	//만약 yoona 를 입력했을경우, a부터 z까지 배열을 다돌고,
    	// a가 4번째 요소에 있기에 제일처음에 4가 나오는듯함.(
    	// o는 1번째, 이어지는 o는 생략
    	// y는 0번째
    	// n은 3번쨰
    	
    }
}

