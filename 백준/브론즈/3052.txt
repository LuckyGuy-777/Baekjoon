package basic;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashSet;
import java.util.StringTokenizer;



public class Main {
    public static void main(String[] args) throws IOException {
//3052번. 나머지(서로다른나머지개수 출력)
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	
    	int arr[] = new int[10]; // 숫자 10개 입력.
    	
    	//각 수를 42로 나눈 나머지를 배열에 저장.
    	for(int i = 0; i<arr.length; i++) {
    		arr[i] = Integer.parseInt(br.readLine());
    		arr[i] = arr[i] % 42;
    	}
    	
    	HashSet<Integer> result = new HashSet<Integer>();
    	// 서로다른 나머지가 몇개나 있나?
    	for(int i = 0; i<arr.length; i++) {
    		result.add(arr[i]);
    	}
    	
    	System.out.println(result.size());
    	
    	
    	
    	
    }
}


// HashSet은. 중복값을 허용하지 않음. 저장순서가 보장되지 않음 (해쉬정렬의 특성)
// HashSet<Integer>를 사용하면 중복된 나머지 값을
// 자동으로 제거할 수 있습니다.

//HashSet.size()를 사용해 서로 다른 
//나머지의 개수를 출력합니다.

// .add로 HashSet의 요소를 추가해줄수있다.


//중복되는 원소를 넣을 경우 하나만 저장한다. 즉, 중복원소를 허용하지 않는다.

//HashSet 은 순서 개념이 없다. 따라서 Collections.sort() 메소드를 사용할 수 없다. 만약 정렬을 하고 싶다면 리스트로 변환 후 정렬해야한다.

-----------------------------------------------------------------------------------------------------------

CASE 2



package basic;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashSet;
import java.util.StringTokenizer;



public class Main {
    public static void main(String[] args) throws IOException {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	HashSet<Integer> h = new HashSet<Integer>();
    	
    	// for 문으로, 해쉬로 10번 입력을 받는다. 
    	// 입력받은값을 42로 나눈 나머지를 해쉬값으로 저장한다.
    	for(int i = 0; i < 10; i++) {
    		h.add(Integer.parseInt(br.readLine()) % 42);
    	}
    	
    	// 중복값이 없는 특성상, size를 표현하면, 답이나옴.
    	System.out.println(h.size());
    }
}


// HashSet은. 중복값을 허용하지 않음. 저장순서가 보장되지 않음 (해쉬정렬의 특성)
// HashSet<Integer>를 사용하면 중복된 나머지 값을
// 자동으로 제거할 수 있습니다.

//HashSet.size()를 사용해 서로 다른 
//나머지의 개수를 출력합니다.

// .add로 HashSet의 요소를 추가해줄수있다.