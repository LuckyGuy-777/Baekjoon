package basic;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.StringTokenizer;



public class Main {
    public static void main(String[] args) throws IOException {
// 10818. 최소, 최대값 구하기
//N개의 정수가 주어진다. 이때, 최솟값과 최댓값을 구하는 프로그램을 작성하시오.
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	
// 배열크기 선언용 N
    	int N = Integer.parseInt(br.readLine());
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	
    	int index = 0;
    	int[] arr = new int[N];

//st.hasMoreTokens() 은,
//st의 토큰이 남아있으면 true, 없으면 false
// while이 참일떄 동안 루프 실행.
// 아래코드는, 숫자를 입력받으면, 다음숫자로 인덱스 증가.
    	while(st.hasMoreTokens()) {
    		arr[index] = Integer.parseInt(st.nextToken());
    		index++;
    	}
    	
// 0번째 요소는 최소값, 마지막원소는 최대값.(배열.length-1)
    	// 오름차순 정렬해주는 메소드.
    	Arrays.sort(arr);
    	System.out.println(arr[0]+" "+arr[N - 1]);
    	
    }
}
// 알아낸것.

// 숫자타입 으로 선언후 MIN_VALUE, MAX_VALUE를 작성하면
//실제 그 데이터 타입이 표현할 수 있는 가장 작은 숫자와 가장 큰 숫자 값이 할당된다.


//st.hasMoreTokens() 은, st의 토큰이 남아있으면 true, 없으면 false

// max 변수에 Integer.MIN_VALUE를 대입하는 이유는 최대값을 찾기 위한 초기값 설정 때문입니다.
// 초기값으로 max에 가장 작은 값을 설정하면, 어떤 숫자와 비교하더라도 그 숫자가 더 크다면 max가 해당 숫자로 갱신
// min 도 같은 맥락임.

//Arrays.sort() 메소드.
// 해당 메소드는, 배열에 저장된 원소값을 오름차순으로 정렬해주는 역할.
// 0번째 요소는 최소값, 마지막원소는 최대값.(배열.length-1)


--------------------------------------- CASE 2


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.StringTokenizer;



public class Main {
    public static void main(String[] args) throws IOException {
// 10818. 최소, 최대값 구하기
//N개의 정수가 주어진다. 이때, 최솟값과 최댓값을 구하는 프로그램을 작성하시오. (배열사용 X. 실행시간 느림이유)
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    
    	// N은 쓰이지 않으므로, 변수저장없이, 그냥 입력만 받음.
    	// 역할이 없는듯함. 배열을 사용하지 않으니.
    	Integer.parseInt(br.readLine());
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	
    	// 모든정수는 -1백만 보다 크거나 같고 1백만 보다 작거나 같은정수.
    	// 비교용으로 max에는 가장작은값, min에는 가장큰값으로 초기화.
    	int max = -1000001;
    	int min = 1000001;
    	
    	// 정수 입력받기.
    	while(st.hasMoreTokens()) {
    		int val = Integer.parseInt(st.nextToken());
    		// 값 분석. max보다 큰가?(-1백만 보다 크거나 같고)
    		// min보다 작은가?(1백만보다 작거나 같은가?)
    		if(val>max) {
    			max = val;
    		}
    		if(val<min) {
    			min = val;
    		}
    	}
    	System.out.println(min+" "+max);
    }
}




